parameter (or (or (nat %end_voting) (or (nat %execute) (nat %flush_proposal))) (or (or (pair %propose (string %title) (pair (string %description_link) (lambda %proposal_lambda unit (list operation)))) (pair %update_governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))))) (or (address %update_sizzler_manager) (pair %vote (nat %proposal_id) (or %vote (unit %down_vote) (unit %up_vote))))));
storage   (pair (pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%end_voting
            # == end_voting ==
            # sp.verify(self.data.proposals[params].status.is_variant('voting') & (sp.now > self.data.proposals[params].status.open_variant('voting')), 'VOTING_OVER') # @storage : @parameter%end_voting
            DUP;        # @storage : @storage : @parameter%end_voting
            DUG 2;      # @storage : @parameter%end_voting : @storage
            CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%end_voting : @storage
            CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
            SWAP;       # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
            DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
            DUG 2;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
            GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
            IF_NONE
              {
                PUSH int 203; # int : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%end_voting : @storage
            GET 14;     # or (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)) : @parameter%end_voting : @storage
            IF_LEFT
              {
                DROP;       # @parameter%end_voting : @storage
                PUSH bool False; # bool : @parameter%end_voting : @storage
              }
              {
                IF_LEFT
                  {
                    DROP;       # @parameter%end_voting : @storage
                    PUSH bool False; # bool : @parameter%end_voting : @storage
                  }
                  {
                    DROP;       # @parameter%end_voting : @storage
                    PUSH bool True; # bool : @parameter%end_voting : @storage
                  }; # bool : @parameter%end_voting : @storage
              }; # bool : @parameter%end_voting : @storage
            IF
              {
                SWAP;       # @storage : @parameter%end_voting
                DUP;        # @storage : @storage : @parameter%end_voting
                DUG 2;      # @storage : @parameter%end_voting : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%end_voting : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
                SWAP;       # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUG 2;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
                IF_NONE
                  {
                    PUSH int 203; # int : @parameter%end_voting : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%end_voting : @storage
                GET 14;     # or (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)) : @parameter%end_voting : @storage
                IF_LEFT
                  {
                    PUSH int 207; # int : or (unit %failed) (unit %passed) : @parameter%end_voting : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    IF_LEFT
                      {
                        PUSH int 207; # int : timestamp : @parameter%end_voting : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # timestamp : @parameter%end_voting : @storage
                  }; # timestamp : @parameter%end_voting : @storage
                NOW;        # @now : timestamp : @parameter%end_voting : @storage
                COMPARE;    # int : @parameter%end_voting : @storage
                GT;         # bool : @parameter%end_voting : @storage
              }
              {
                PUSH bool False; # bool : @parameter%end_voting : @storage
              }; # bool : @parameter%end_voting : @storage
            IF
              {}
              {
                PUSH string "VOTING_OVER"; # string : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }; # @parameter%end_voting : @storage
            SWAP;       # @storage : @parameter%end_voting
            # if (self.data.proposals[params].up_votes > self.data.proposals[params].down_votes) & ((self.data.proposals[params].up_votes + self.data.proposals[params].down_votes) >= self.data.governance_parameters.quorum_threshold): # @storage : @parameter%end_voting
            DUP;        # @storage : @storage : @parameter%end_voting
            DUG 2;      # @storage : @parameter%end_voting : @storage
            CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%end_voting : @storage
            CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
            SWAP;       # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
            DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
            DUG 2;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
            GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : @storage
            IF_NONE
              {
                PUSH int 203; # int : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%end_voting : @storage
            GET 11;     # nat : @parameter%end_voting : @storage
            DUP 3;      # @storage : nat : @parameter%end_voting : @storage
            CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : nat : @parameter%end_voting : @storage
            CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : @parameter%end_voting : @storage
            DUP 3;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : @parameter%end_voting : @storage
            GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : @parameter%end_voting : @storage
            IF_NONE
              {
                PUSH int 203; # int : nat : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @parameter%end_voting : @storage
            GET 9;      # nat : nat : @parameter%end_voting : @storage
            COMPARE;    # int : @parameter%end_voting : @storage
            GT;         # bool : @parameter%end_voting : @storage
            IF
              {
                SWAP;       # @storage : @parameter%end_voting
                DUP;        # @storage : @storage : @parameter%end_voting
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @storage : @parameter%end_voting
                CAR;        # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : @storage : @parameter%end_voting
                GET 3;      # nat : @storage : @parameter%end_voting
                SWAP;       # @storage : nat : @parameter%end_voting
                DUP;        # @storage : @storage : nat : @parameter%end_voting
                DUG 3;      # @storage : nat : @parameter%end_voting : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : nat : @parameter%end_voting : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : @parameter%end_voting : @storage
                DUP 3;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : @parameter%end_voting : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : @parameter%end_voting : @storage
                IF_NONE
                  {
                    PUSH int 203; # int : nat : @parameter%end_voting : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%end_voting : @storage
                GET 11;     # nat : nat : @parameter%end_voting : @storage
                DUP 4;      # @storage : nat : nat : @parameter%end_voting : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : nat : nat : @parameter%end_voting : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : nat : @parameter%end_voting : @storage
                DUP 4;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : nat : @parameter%end_voting : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : nat : @parameter%end_voting : @storage
                IF_NONE
                  {
                    PUSH int 203; # int : nat : nat : @parameter%end_voting : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : nat : @parameter%end_voting : @storage
                GET 9;      # nat : nat : nat : @parameter%end_voting : @storage
                ADD;        # nat : nat : @parameter%end_voting : @storage
                COMPARE;    # int : @parameter%end_voting : @storage
                GE;         # bool : @parameter%end_voting : @storage
              }
              {
                PUSH bool False; # bool : @parameter%end_voting : @storage
              }; # bool : @parameter%end_voting : @storage
            IF
              {
                SWAP;       # @storage : @parameter%end_voting
                # self.data.proposals[params].status = variant('timelocked', sp.add_seconds(sp.now, self.data.governance_parameters.timelock_period)) # @storage : @parameter%end_voting
                DUP;        # @storage : @storage : @parameter%end_voting
                DUG 2;      # @storage : @parameter%end_voting : @storage
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting : @storage
                UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting : @storage
                SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting : @storage
                DUP;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting : @storage
                DIG 4;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DUG 2;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                IF_NONE
                  {
                    PUSH int 218; # int : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DIG 5;      # @storage : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                CAR;        # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                GET 6;      # int : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                NOW;        # @now : int : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                ADD;        # timestamp : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                LEFT timestamp; # or timestamp timestamp : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                RIGHT (or unit unit); # or (or unit unit) (or timestamp timestamp) : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                UPDATE 14;  # @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SOME;       # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SWAP;       # @parameter%end_voting : option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                UPDATE;     # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
              }
              {
                SWAP;       # @storage : @parameter%end_voting
                # self.data.proposals[params].status = variant('failed', sp.unit) # @storage : @parameter%end_voting
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting
                UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting
                SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting
                DUP;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%end_voting
                DIG 4;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                DUG 2;      # @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                IF_NONE
                  {
                    PUSH int 223; # int : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                PUSH (or (or unit unit) (or timestamp timestamp)) (Left (Left Unit)); # or (or unit unit) (or timestamp timestamp) : @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                UPDATE 14;  # @some : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SOME;       # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%end_voting : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SWAP;       # @parameter%end_voting : option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                UPDATE;     # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
              }; # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
            NIL operation; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%execute
                # == execute ==
                # sp.verify(self.data.proposals[params].status.is_variant('timelocked') & (sp.now > self.data.proposals[params].status.open_variant('timelocked')), 'PROPOSAL_TIMELOCKED') # @storage : @parameter%execute
                DUP;        # @storage : @storage : @parameter%execute
                DUG 2;      # @storage : @parameter%execute : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%execute : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : @storage
                SWAP;       # @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUP;        # @parameter%execute : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUG 2;      # @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : @storage
                IF_NONE
                  {
                    PUSH int 242; # int : @parameter%execute : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%execute : @storage
                GET 14;     # or (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)) : @parameter%execute : @storage
                IF_LEFT
                  {
                    DROP;       # @parameter%execute : @storage
                    PUSH bool False; # bool : @parameter%execute : @storage
                  }
                  {
                    IF_LEFT
                      {
                        DROP;       # @parameter%execute : @storage
                        PUSH bool True; # bool : @parameter%execute : @storage
                      }
                      {
                        DROP;       # @parameter%execute : @storage
                        PUSH bool False; # bool : @parameter%execute : @storage
                      }; # bool : @parameter%execute : @storage
                  }; # bool : @parameter%execute : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%execute
                    DUP;        # @storage : @storage : @parameter%execute
                    DUG 2;      # @storage : @parameter%execute : @storage
                    CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%execute : @storage
                    CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : @storage
                    SWAP;       # @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                    DUP;        # @parameter%execute : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                    DUG 2;      # @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : @storage
                    GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : @storage
                    IF_NONE
                      {
                        PUSH int 242; # int : @parameter%execute : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%execute : @storage
                    GET 14;     # or (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)) : @parameter%execute : @storage
                    IF_LEFT
                      {
                        PUSH int 246; # int : or (unit %failed) (unit %passed) : @parameter%execute : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        IF_LEFT
                          {}
                          {
                            PUSH int 246; # int : timestamp : @parameter%execute : @storage
                            FAILWITH;   # FAILED
                          }; # timestamp : @parameter%execute : @storage
                      }; # timestamp : @parameter%execute : @storage
                    NOW;        # @now : timestamp : @parameter%execute : @storage
                    COMPARE;    # int : @parameter%execute : @storage
                    GT;         # bool : @parameter%execute : @storage
                  }
                  {
                    PUSH bool False; # bool : @parameter%execute : @storage
                  }; # bool : @parameter%execute : @storage
                IF
                  {}
                  {
                    PUSH string "PROPOSAL_TIMELOCKED"; # string : @parameter%execute : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%execute : @storage
                SWAP;       # @storage : @parameter%execute
                # self.data.proposals[params].status = variant('passed', sp.unit) # @storage : @parameter%execute
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                DUP;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                DUP 5;      # @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                DUP;        # @parameter%execute : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                DUG 2;      # @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                IF_NONE
                  {
                    PUSH int 251; # int : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                PUSH (or (or unit unit) (or timestamp timestamp)) (Left (Right Unit)); # or (or unit unit) (or timestamp timestamp) : @some : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                UPDATE 14;  # @some : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                SOME;       # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                SWAP;       # @parameter%execute : option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                UPDATE;     # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%execute
                PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%execute
                SWAP;       # @parameter%execute : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                # for op in self.data.proposals[params].proposal_lambda(sp.unit): ... # @parameter%execute : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                NIL operation; # list operation : @parameter%execute : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                DUP 3;      # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : list operation : @parameter%execute : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                CAR;        # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : list operation : @parameter%execute : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : list operation : @parameter%execute : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                DIG 2;      # @parameter%execute : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                IF_NONE
                  {
                    PUSH int 242; # int : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                GET 7;      # lambda unit (list operation) : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                UNIT;       # unit : lambda unit (list operation) : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                EXEC;       # list operation : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                ITER
                  {
                    # sp.operations().push(op) # operation : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    CONS;       # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                  }; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
              }
              {
                SWAP;       # @storage : @parameter%flush_proposal
                # == flush_proposal ==
                # sp.verify(sp.sender == self.data.proposals[params].handler, 'NOT_AUTHORISED') # @storage : @parameter%flush_proposal
                DUP;        # @storage : @storage : @parameter%flush_proposal
                DUG 2;      # @storage : @parameter%flush_proposal : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%flush_proposal : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%flush_proposal : @storage
                SWAP;       # @parameter%flush_proposal : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUP;        # @parameter%flush_proposal : @parameter%flush_proposal : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUG 2;      # @parameter%flush_proposal : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%flush_proposal : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%flush_proposal : @storage
                IF_NONE
                  {
                    PUSH int 229; # int : @parameter%flush_proposal : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%flush_proposal : @storage
                GET 3;      # address : @parameter%flush_proposal : @storage
                SENDER;     # @sender : address : @parameter%flush_proposal : @storage
                COMPARE;    # int : @parameter%flush_proposal : @storage
                EQ;         # bool : @parameter%flush_proposal : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_AUTHORISED"; # string : @parameter%flush_proposal : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%flush_proposal : @storage
                SWAP;       # @storage : @parameter%flush_proposal
                # sp.verify(self.data.proposals[params].status.is_variant('timelocked'), 'CANNOT_FLUSH_PROPOSAL') # @storage : @parameter%flush_proposal
                DUP;        # @storage : @storage : @parameter%flush_proposal
                DUG 2;      # @storage : @parameter%flush_proposal : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%flush_proposal : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%flush_proposal : @storage
                SWAP;       # @parameter%flush_proposal : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUP;        # @parameter%flush_proposal : @parameter%flush_proposal : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUG 2;      # @parameter%flush_proposal : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%flush_proposal : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%flush_proposal : @storage
                IF_NONE
                  {
                    PUSH int 229; # int : @parameter%flush_proposal : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%flush_proposal : @storage
                GET 14;     # or (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)) : @parameter%flush_proposal : @storage
                IF_LEFT
                  {
                    DROP;       # @parameter%flush_proposal : @storage
                    PUSH bool False; # bool : @parameter%flush_proposal : @storage
                  }
                  {
                    IF_LEFT
                      {
                        DROP;       # @parameter%flush_proposal : @storage
                        PUSH bool True; # bool : @parameter%flush_proposal : @storage
                      }
                      {
                        DROP;       # @parameter%flush_proposal : @storage
                        PUSH bool False; # bool : @parameter%flush_proposal : @storage
                      }; # bool : @parameter%flush_proposal : @storage
                  }; # bool : @parameter%flush_proposal : @storage
                IF
                  {}
                  {
                    PUSH string "CANNOT_FLUSH_PROPOSAL"; # string : @parameter%flush_proposal : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%flush_proposal : @storage
                SWAP;       # @storage : @parameter%flush_proposal
                # del self.data.proposals[params] # @storage : @parameter%flush_proposal
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%flush_proposal
                UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%flush_proposal
                SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%flush_proposal
                NONE (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))); # option (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%flush_proposal
                DIG 4;      # @parameter%flush_proposal : option (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                UPDATE;     # big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp)))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
                NIL operation; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
              }; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
          }; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%propose
                # == propose ==
                # sp.verify(sp.view("get_sizzler_voting_power", self.data.sizzler_manager, sp.sender, sp.TNat).open_some(message = 'INVALID_VIEW') >= self.data.governance_parameters.proposal_threshold, 'NOT_ENOUGH_VOTING_POWER') # @storage : @parameter%propose
                DUP;        # @storage : @storage : @parameter%propose
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @storage : @parameter%propose
                CAR;        # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : @storage : @parameter%propose
                GET 5;      # nat : @storage : @parameter%propose
                SWAP;       # @storage : nat : @parameter%propose
                DUP;        # @storage : @storage : nat : @parameter%propose
                DUG 3;      # @storage : nat : @parameter%propose : @storage
                GET 3;      # address : nat : @parameter%propose : @storage
                SENDER;     # @sender : address : nat : @parameter%propose : @storage
                VIEW "get_sizzler_voting_power" nat; # option nat : nat : @parameter%propose : @storage
                IF_NONE
                  {
                    PUSH string "INVALID_VIEW"; # string : nat : @parameter%propose : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%propose : @storage
                COMPARE;    # int : @parameter%propose : @storage
                GE;         # bool : @parameter%propose : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ENOUGH_VOTING_POWER"; # string : @parameter%propose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%propose : @storage
                SWAP;       # @storage : @parameter%propose
                # self.data.uid += 1 # @storage : @parameter%propose
                DUP;        # @storage : @storage : @parameter%propose
                GET 4;      # nat : @storage : @parameter%propose
                PUSH nat 1; # nat : nat : @storage : @parameter%propose
                ADD;        # nat : @storage : @parameter%propose
                UPDATE 4;   # @storage : @parameter%propose
                # self.data.proposals[self.data.uid] = sp.record(title = params.title, handler = sp.sender, description_link = params.description_link, proposal_lambda = params.proposal_lambda, up_votes = 0, down_votes = 0, voters = {}, status = variant('voting', sp.add_seconds(sp.now, self.data.governance_parameters.voting_period))) # @storage : @parameter%propose
                DUP;        # @storage : @storage : @parameter%propose
                DUG 2;      # @storage : @parameter%propose : @storage
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                DUP 5;      # @storage : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                CAR;        # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                CAR;        # int : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                NOW;        # @now : int : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                ADD;        # timestamp : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                RIGHT timestamp; # or timestamp timestamp : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                RIGHT (or unit unit); # or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                EMPTY_MAP address (or nat nat); # map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                PUSH nat 0; # nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                DUP;        # nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                DIG 7;      # @parameter%propose : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DUP;        # @parameter%propose : @parameter%propose : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                GET 4;      # lambda unit (list operation) : @parameter%propose : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                SWAP;       # @parameter%propose : lambda unit (list operation) : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DUP;        # @parameter%propose : @parameter%propose : lambda unit (list operation) : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DUG 9;      # @parameter%propose : lambda unit (list operation) : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                GET 3;      # string : lambda unit (list operation) : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                SENDER;     # @sender : string : lambda unit (list operation) : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                DUP 11;     # @parameter%propose : @sender : string : lambda unit (list operation) : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                CAR;        # string : @sender : string : lambda unit (list operation) : nat : nat : map address (or nat nat) : or (or unit unit) (or timestamp timestamp) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                PAIR 8;     # pair string (pair @sender (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp)))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%propose : @storage
                DIG 4;      # @parameter%propose : pair string (pair @sender (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp)))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DROP;       # pair string (pair @sender (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp)))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                SOME;       # option (pair string (pair @sender (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @storage
                DIG 4;      # @storage : option (pair string (pair @sender (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                GET 4;      # nat : option (pair string (pair @sender (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                UPDATE;     # big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp)))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
              }
              {
                # == update_governance_parameters ==
                # sp.verify(sp.sender == sp.self_address, 'NOT_AUTHORISED') # @parameter%update_governance_parameters : @storage
                SELF_ADDRESS; # @self : @parameter%update_governance_parameters : @storage
                SENDER;     # @sender : @self : @parameter%update_governance_parameters : @storage
                COMPARE;    # int : @parameter%update_governance_parameters : @storage
                EQ;         # bool : @parameter%update_governance_parameters : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_AUTHORISED"; # string : @parameter%update_governance_parameters : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%update_governance_parameters : @storage
                SWAP;       # @storage : @parameter%update_governance_parameters
                # self.data.governance_parameters = params # @storage : @parameter%update_governance_parameters
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%update_governance_parameters
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%update_governance_parameters
                DIG 2;      # @parameter%update_governance_parameters : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair @parameter%update_governance_parameters (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid)
                PAIR;       # pair (pair @parameter%update_governance_parameters (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
              }; # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
          }
          {
            IF_LEFT
              {
                # == update_sizzler_manager ==
                # sp.verify(sp.sender == sp.self_address, 'NOT_AUTHORISED') # @parameter%update_sizzler_manager : @storage
                SELF_ADDRESS; # @self : @parameter%update_sizzler_manager : @storage
                SENDER;     # @sender : @self : @parameter%update_sizzler_manager : @storage
                COMPARE;    # int : @parameter%update_sizzler_manager : @storage
                EQ;         # bool : @parameter%update_sizzler_manager : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_AUTHORISED"; # string : @parameter%update_sizzler_manager : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%update_sizzler_manager : @storage
                # self.data.sizzler_manager = params # @parameter%update_sizzler_manager : @storage
                UPDATE 3;   # @storage
              }
              {
                SWAP;       # @storage : @parameter%vote
                # == vote ==
                # sp.verify(self.data.proposals[params.proposal_id].status.is_variant('voting') & (sp.now < self.data.proposals[params.proposal_id].status.open_variant('voting')), 'VOTING_OVER') # @storage : @parameter%vote
                DUP;        # @storage : @storage : @parameter%vote
                DUG 2;      # @storage : @parameter%vote : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%vote : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                SWAP;       # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUP;        # @parameter%vote : @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUG 2;      # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                CAR;        # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                IF_NONE
                  {
                    PUSH int 170; # int : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%vote : @storage
                GET 14;     # or (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)) : @parameter%vote : @storage
                IF_LEFT
                  {
                    DROP;       # @parameter%vote : @storage
                    PUSH bool False; # bool : @parameter%vote : @storage
                  }
                  {
                    IF_LEFT
                      {
                        DROP;       # @parameter%vote : @storage
                        PUSH bool False; # bool : @parameter%vote : @storage
                      }
                      {
                        DROP;       # @parameter%vote : @storage
                        PUSH bool True; # bool : @parameter%vote : @storage
                      }; # bool : @parameter%vote : @storage
                  }; # bool : @parameter%vote : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%vote
                    DUP;        # @storage : @storage : @parameter%vote
                    DUG 2;      # @storage : @parameter%vote : @storage
                    CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%vote : @storage
                    CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                    SWAP;       # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                    DUP;        # @parameter%vote : @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                    DUG 2;      # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                    CAR;        # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                    GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                    IF_NONE
                      {
                        PUSH int 170; # int : @parameter%vote : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%vote : @storage
                    GET 14;     # or (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)) : @parameter%vote : @storage
                    IF_LEFT
                      {
                        PUSH int 174; # int : or (unit %failed) (unit %passed) : @parameter%vote : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        IF_LEFT
                          {
                            PUSH int 174; # int : timestamp : @parameter%vote : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # timestamp : @parameter%vote : @storage
                      }; # timestamp : @parameter%vote : @storage
                    NOW;        # @now : timestamp : @parameter%vote : @storage
                    COMPARE;    # int : @parameter%vote : @storage
                    LT;         # bool : @parameter%vote : @storage
                  }
                  {
                    PUSH bool False; # bool : @parameter%vote : @storage
                  }; # bool : @parameter%vote : @storage
                IF
                  {}
                  {
                    PUSH string "VOTING_OVER"; # string : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote : @storage
                SWAP;       # @storage : @parameter%vote
                # sp.verify(~ (self.data.proposals[params.proposal_id].voters.contains(sp.sender)), 'ALREADY_VOTED') # @storage : @parameter%vote
                DUP;        # @storage : @storage : @parameter%vote
                DUG 2;      # @storage : @parameter%vote : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : @parameter%vote : @storage
                CDR;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                SWAP;       # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUP;        # @parameter%vote : @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @storage
                DUG 2;      # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                CAR;        # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : @parameter%vote : @storage
                IF_NONE
                  {
                    PUSH int 170; # int : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%vote : @storage
                GET 13;     # map address (or (nat %down_vote) (nat %up_vote)) : @parameter%vote : @storage
                SENDER;     # @sender : map address (or (nat %down_vote) (nat %up_vote)) : @parameter%vote : @storage
                MEM;        # bool : @parameter%vote : @storage
                IF
                  {
                    PUSH string "ALREADY_VOTED"; # string : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%vote : @storage
                # sp.verify(sp.view("get_sizzler_voting_power", self.data.sizzler_manager, sp.sender, sp.TNat).open_some(message = 'INVALID_VIEW') > 0, 'NOT_ENOUGH_VOTING_POWER') # @parameter%vote : @storage
                PUSH nat 0; # nat : @parameter%vote : @storage
                DUP 3;      # @storage : nat : @parameter%vote : @storage
                GET 3;      # address : nat : @parameter%vote : @storage
                SENDER;     # @sender : address : nat : @parameter%vote : @storage
                VIEW "get_sizzler_voting_power" nat; # option nat : nat : @parameter%vote : @storage
                IF_NONE
                  {
                    PUSH string "INVALID_VIEW"; # string : nat : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%vote : @storage
                COMPARE;    # int : @parameter%vote : @storage
                GT;         # bool : @parameter%vote : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ENOUGH_VOTING_POWER"; # string : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote : @storage
                # with params.vote.match_cases(...): # @parameter%vote : @storage
                DUP;        # @parameter%vote : @parameter%vote : @storage
                CDR;        # or (unit %down_vote) (unit %up_vote) : @parameter%vote : @storage
                IF_LEFT
                  {
                    DROP;       # @parameter%vote : @storage
                    SWAP;       # @storage : @parameter%vote
                    # self.data.proposals[params.proposal_id].down_votes += sp.view("get_sizzler_voting_power", self.data.sizzler_manager, sp.sender, sp.TNat).open_some(message = 'INVALID_VIEW') # @storage : @parameter%vote
                    DUP;        # @storage : @storage : @parameter%vote
                    DUG 2;      # @storage : @parameter%vote : @storage
                    UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP 5;      # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    CAR;        # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP;        # nat : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUG 2;      # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    IF_NONE
                      {
                        PUSH int 196; # int : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP;        # @some : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    GET 11;     # nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DIG 7;      # @storage : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    GET 3;      # address : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SENDER;     # @sender : address : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    VIEW "get_sizzler_voting_power" nat; # option nat : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    IF_NONE
                      {
                        PUSH string "INVALID_VIEW"; # string : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    ADD;        # nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    UPDATE 11;  # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SOME;       # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SWAP;       # nat : option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    UPDATE;     # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote
                    # self.data.proposals[params.proposal_id].voters[sp.sender] = variant('down_vote', sp.view("get_sizzler_voting_power", self.data.sizzler_manager, sp.sender, sp.TNat).open_some(message = 'INVALID_VIEW')) # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote
                    DUP;        # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote
                    DUG 2;      # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    UNPAIR;     # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUP;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DIG 4;      # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    CAR;        # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUP;        # nat : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUG 2;      # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    IF_NONE
                      {
                        PUSH int 197; # int : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUP;        # @some : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    GET 13;     # map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DIG 6;      # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    GET 3;      # address : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SENDER;     # @sender : address : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    VIEW "get_sizzler_voting_power" nat; # option nat : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    IF_NONE
                      {
                        PUSH string "INVALID_VIEW"; # string : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    LEFT nat;   # or nat nat : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SOME;       # option (or nat nat) : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SENDER;     # @sender : option (or nat nat) : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    UPDATE;     # map address (or nat nat) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    UPDATE 13;  # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SOME;       # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SWAP;       # nat : option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    UPDATE;     # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid)
                    PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid)
                    PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                  }
                  {
                    DROP;       # @parameter%vote : @storage
                    SWAP;       # @storage : @parameter%vote
                    # self.data.proposals[params.proposal_id].up_votes += sp.view("get_sizzler_voting_power", self.data.sizzler_manager, sp.sender, sp.TNat).open_some(message = 'INVALID_VIEW') # @storage : @parameter%vote
                    DUP;        # @storage : @storage : @parameter%vote
                    DUG 2;      # @storage : @parameter%vote : @storage
                    UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map %proposals nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP 5;      # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    CAR;        # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP;        # nat : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUG 2;      # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    IF_NONE
                      {
                        PUSH int 193; # int : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DUP;        # @some : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    GET 9;      # nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : @storage
                    DIG 7;      # @storage : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    GET 3;      # address : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SENDER;     # @sender : address : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    VIEW "get_sizzler_voting_power" nat; # option nat : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    IF_NONE
                      {
                        PUSH string "INVALID_VIEW"; # string : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    ADD;        # nat : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    UPDATE 9;   # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SOME;       # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SWAP;       # nat : option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    UPDATE;     # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote
                    PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote
                    # self.data.proposals[params.proposal_id].voters[sp.sender] = variant('up_vote', sp.view("get_sizzler_voting_power", self.data.sizzler_manager, sp.sender, sp.TNat).open_some(message = 'INVALID_VIEW')) # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote
                    DUP;        # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote
                    DUG 2;      # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    UNPAIR;     # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    UNPAIR;     # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    SWAP;       # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUP;        # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : @parameter%vote : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DIG 4;      # @parameter%vote : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    CAR;        # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUP;        # nat : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUG 2;      # nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    GET;        # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    IF_NONE
                      {
                        PUSH int 194; # int : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DUP;        # @some : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    GET 13;     # map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid) : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                    DIG 6;      # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid)) : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    GET 3;      # address : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SENDER;     # @sender : address : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    VIEW "get_sizzler_voting_power" nat; # option nat : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    IF_NONE
                      {
                        PUSH string "INVALID_VIEW"; # string : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    RIGHT nat;  # or nat nat : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SOME;       # option (or nat nat) : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SENDER;     # @sender : option (or nat nat) : map address (or (nat %down_vote) (nat %up_vote)) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    UPDATE;     # map address (or nat nat) : @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    UPDATE 13;  # @some : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SOME;       # option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : nat : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SWAP;       # nat : option (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    UPDATE;     # big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : pair (address %sizzler_manager) (nat %uid)
                    SWAP;       # pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period))) : big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))) : pair (address %sizzler_manager) (nat %uid)
                    PAIR;       # pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting))))))))))) : pair (address %sizzler_manager) (nat %uid)
                    PAIR;       # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
                  }; # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
              }; # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair (string %title) (pair (address %handler) (pair (string %description_link) (pair (lambda %proposal_lambda unit (list operation)) (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (or (nat %down_vote) (nat %up_vote))) (or %status (or (unit %failed) (unit %passed)) (or (timestamp %timelocked) (timestamp %voting)))))))))))) (pair (address %sizzler_manager) (nat %uid))
          }; # pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
        NIL operation; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
      }; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
    NIL operation; # list operation : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
    SWAP;       # list operation : list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
      }; # list operation : pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid))
    PAIR;       # pair (list operation) (pair (pair (pair (int %voting_period) (pair (nat %quorum_threshold) (pair (nat %proposal_threshold) (int %timelock_period)))) (big_map nat (pair string (pair address (pair string (pair (lambda unit (list operation)) (pair nat (pair nat (pair (map address (or nat nat)) (or (or unit unit) (or timestamp timestamp))))))))))) (pair (address %sizzler_manager) (nat %uid)))
  };